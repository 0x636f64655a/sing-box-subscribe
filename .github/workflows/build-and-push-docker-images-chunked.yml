name: Build & Push Docker Images

on:
  workflow_call:
    inputs:
      repo_tags:
        type: string
        required: true
      registry:
        type: string
        required: true
      upstream_full_name:
        type: string
        required: true

jobs:
  pre-build:
    name: Pre-Build Setup
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      repo_license: ${{ steps.retrieve_upstream_info.outputs.REPO_LICENSE }}
      repo_contributors: ${{ steps.retrieve_upstream_info.outputs.REPO_CONTRIBUTORS }}
      sbom_format: ${{ steps.sbom-format.outputs.SBOM_FORMAT }}
      build_tags: ${{ steps.build-tags.outputs.BUILD_TAGS }}
      platform_tag_chunks: ${{ steps.create-chunks.outputs.PLATFORM_TAG_CHUNKS }}
    steps:
      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Detect Supported Platforms
        id: detect_platforms
        run: |
          echo "Detecting supported platforms..."
          platforms=$(docker buildx inspect --bootstrap --format '{{ join .Platforms "\n" }}')
          
          if [[ -z "$platforms" ]]; then
            echo "No platforms detected. Falling back to linux/amd64"
            platforms="linux/amd64"
          fi
          
          # Convert to JSON array properly
          platforms_json=$(echo "$platforms" | jq -R . | jq -cs .)
          echo "Detected supported platforms: $platforms_json"
          echo "BUILDX_PLATFORMS=$platforms_json" >> "$GITHUB_ENV"

      - name: Retrieve Upstream Info
        id: retrieve_upstream_info
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          upstream_full_name: ${{ inputs.upstream_full_name }}
        run: |
          # Extract upstream repo's license
          license=$(curl -s -H "Authorization: Bearer $GH_TOKEN" "https://api.github.com/repos/$upstream_full_name/license" | jq -r '.license?.spdx_id // "UNKNOWN"')

          echo "Detected license: $license from the upstream repo $upstream_full_name"
          echo "REPO_LICENSE=$license" >> "$GITHUB_OUTPUT"

          # Extract upstream repo's contributors
          contributors=$(curl -s "https://api.github.com/repos/$upstream_full_name/contributors" | jq -r '[.[] | select(.type == "User") | .login] | join(",")')
          echo "Contributors: $contributors"
          echo "REPO_CONTRIBUTORS=$contributors" >> "$GITHUB_OUTPUT"

      - name: Set SBOM Format
        id: sbom-format
        run: |
          echo "SBOM_FORMAT=spdx" >> "$GITHUB_OUTPUT"

      - name: Determine New Tags to Build
        id: build-tags
        run: |
          if [[ "${{ inputs.registry }}" == "dockerhub" ]]; then
            echo "Preparing tags for Docker Hub..."
            registry_tags=()
            url="https://hub.docker.com/v2/repositories/${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}/tags?page_size=100"

            while [ -n "$url" ]; do
              response=$(curl -s "$url")

              if echo "$response" | jq -e 'has("message")' >/dev/null; then
                echo "API error from Docker Hub: $(echo "$response" | jq -r '.message')"
                exit 1
              fi

              tags=$(echo "$response" | jq -e -r '.results[]?.name // empty' 2>/dev/null)
              jq_status=$?

              if [[ $jq_status -ne 0 ]]; then
                echo "Error: Failed to parse expected tag data from Docker Hub response."
                echo "Raw response was: $response"
                exit 1
              fi

              readarray -t current_page_tags <<< "$tags"
              echo "Found ${#current_page_tags[@]} tags on this page."

              if [ ${#current_page_tags[@]} -eq 0 ]; then
                break
              fi

              registry_tags+=("${current_page_tags[@]}")

              next_url=$(echo "$response" | jq -r '.next // empty')
              if [ -z "$next_url" ]; then
                break
              fi
              url="$next_url"
            done

          elif [[ "${{ inputs.registry }}" == "ghcr" ]]; then
            echo "Preparing tags for GHCR..."
            page=1
            registry_tags=()

            # Detect if the repo belongs to a user or organization
            response=$(curl -s "https://api.github.com/repos/${{ github.repository }}")
            owner_type=$(echo "$response" | jq -r '.owner.type // "User"')
            jq_status=$?

            if [[ $jq_status -ne 0 || -z "$owner_type" ]]; then
              echo "Warning: Failed to determine repository owner type. Defaulting to 'User'."
              echo "Raw response was: $response"
              owner_type="User"
            fi

            case "$owner_type" in
              Organization)
                api_url_base="https://api.github.com/orgs/${{ github.repository_owner }}"
                ;;
              *)
                api_url_base="https://api.github.com/users/${{ github.repository_owner }}"
                ;;
            esac

            while :; do
              echo "Fetching GHCR tags (page $page)..."
              response=$(curl -s "$api_url_base/packages/container/${{ github.event.repository.name }}/versions?per_page=100&page=$page")

              # Check for API error
              if echo "$response" | jq -e 'has("message")' >/dev/null; then
                echo "API error from GHCR: $(echo "$response" | jq -r '.message')"
                exit 1
              fi

              tags=$(echo "$response" | jq -e -r '.[].metadata.container.tags[]? // empty' 2>/dev/null)
              jq_status=$?

              if [[ $jq_status -ne 0 ]]; then
                echo "Error: Failed to parse expected tag data from GHCR response."
                echo "Raw response was: $response"
                exit 1
              fi

              readarray -t current_page_tags <<< "$tags"
              echo "Found ${#current_page_tags[@]} tags on page $page."

              if [[ ${#current_page_tags[@]} -eq 0 ]]; then
                echo "No more tags found on page $page."
                break
              fi

              registry_tags+=("${current_page_tags[@]}")
              ((page++))
            done

          else
            echo "Error: Unknown registry '${{ inputs.registry }}'"
            exit 1
          fi

          new_tags=()

          if [ -n "${{ inputs.repo_tags }}" ]; then
            for tag in $(echo '${{ inputs.repo_tags }}' | jq -r '.[]'); do
              if ! printf "%s\n" "${registry_tags[@]}" | grep -Fwq -- "$tag"; then
                new_tags+=("$tag")
              else
                echo "Tag already exists in registry: $tag"
              fi
            done
          else
            echo "No repo_tags input received."
          fi

          if [ ${#new_tags[@]} -gt 0 ]; then
            echo "New tags detected: ${new_tags[*]}"
            echo "BUILD_TAGS=$(printf '%s\n' "${new_tags[@]}" | jq -R . | jq -cs .)" >> "$GITHUB_OUTPUT"
          else
            echo "No new tags found."
            echo "BUILD_TAGS=[]" >> "$GITHUB_OUTPUT"
          fi
      
      - name: Create Platform-Tag Matrix Chunks
        id: create-chunks
        run: |
          # Get platforms from environment variable
          if [[ -z "$BUILDX_PLATFORMS" ]]; then
            echo "Error: BUILDX_PLATFORMS environment variable is empty or not set"
            exit 1
          fi
          
          # Parse build tags
          build_tags='${{ steps.build-tags.outputs.BUILD_TAGS }}'
          if [[ "$build_tags" == "[]" ]]; then
            echo "No new tags to build. Creating empty matrix to avoid workflow failure."
            echo "PLATFORM_TAG_CHUNKS=[{\"id\":\"0\",\"combinations\":[]}]" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          
          # Create platform-tag combinations
          echo "Creating platform-tag combinations..."
          combinations=()
          for platform in $(echo "$BUILDX_PLATFORMS" | jq -r '.[]'); do
            for tag in $(echo "$build_tags" | jq -r '.[]'); do
              combinations+=("{\"platform\":\"$platform\",\"tag\":\"$tag\"}")
            done
          done
          
          # Calculate number of chunks (max 250 jobs per chunk to stay under 256 limit)
          total_combinations=${#combinations[@]}
          echo "Total combinations: $total_combinations"
          
          if [[ $total_combinations -eq 0 ]]; then
            echo "No platform-tag combinations found. Creating empty matrix."
            echo "PLATFORM_TAG_CHUNKS=[{\"id\":\"0\",\"combinations\":[]}]" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          
          chunk_size=250
          num_chunks=$(( (total_combinations + chunk_size - 1) / chunk_size ))
          echo "Creating $num_chunks chunks"
          
          # Create chunks array
          chunks_array="["
          for ((i=0; i<num_chunks; i++)); do
            start_idx=$((i * chunk_size))
            end_idx=$(( (i+1) * chunk_size - 1 ))
            if [[ $end_idx -ge $total_combinations ]]; then
              end_idx=$((total_combinations - 1))
            fi
            
            chunk="["
            for ((j=start_idx; j<=end_idx; j++)); do
              if [[ $j -gt $start_idx ]]; then
                chunk+=","
              fi
              chunk+="${combinations[$j]}"
            done
            chunk+="]"
            
            if [[ $i -gt 0 ]]; then
              chunks_array+=","
            fi
            chunks_array+="{\"id\":\"$i\",\"combinations\":$chunk}"
          done
          chunks_array+="]"
          
          echo "Created $num_chunks chunks of platform-tag combinations"
          echo "PLATFORM_TAG_CHUNKS=$chunks_array" >> "$GITHUB_OUTPUT"

  build-and-push-ghcr:
    name: Build & Push to GHCR - Chunk ${{ matrix.chunk.id }}
    if: ${{ inputs.registry == 'ghcr' }}
    needs: pre-build
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    env:
      sbom_format: ${{ needs.pre-build.outputs.sbom_format }}
    strategy:
      max-parallel: 10
      fail-fast: false
      matrix:
        chunk: ${{ fromJson(needs.pre-build.outputs.platform_tag_chunks) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Process each platform-tag combination in this chunk
      - name: Process Combinations
        run: |
          combinations='${{ toJson(matrix.chunk.combinations) }}'
          echo "Processing $(echo "$combinations" | jq length) combinations in chunk ${{ matrix.chunk.id }}"
          
          for combination in $(echo "$combinations" | jq -c '.[]'); do
            platform=$(echo "$combination" | jq -r '.platform')
            tag=$(echo "$combination" | jq -r '.tag')
            
            echo "Building for platform: $platform, tag: $tag"
            
            # Generate metadata for this specific platform-tag
            meta_json=$(docker buildx imagetools inspect \
              --format '{{ json . }}' \
              ghcr.io/${{ github.actor }}/${{ github.event.repository.name }}:latest 2>/dev/null || echo "{}")
            
            # Build and push
            docker buildx build \
              --platform $platform \
              --tag ghcr.io/${{ github.actor }}/${{ github.event.repository.name }}:$tag \
              --cache-from type=registry,ref=ghcr.io/${{ github.actor }}/${{ github.event.repository.name }}:cache-${{ github.ref_name }},oci-mediatypes=true,compression=zstd,ignore-error=true \
              --cache-to type=registry,ref=ghcr.io/${{ github.actor }}/${{ github.event.repository.name }}:cache-${{ github.ref_name }},mode=max,compression=zstd,compression-level=5 \
              --label "org.opencontainers.image.title=${{ github.event.repository.name }}" \
              --label "org.opencontainers.image.version=$tag" \
              --label "org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}" \
              --label "org.opencontainers.image.authors=${{ needs.pre-build.outputs.repo_contributors }}" \
              --label "org.opencontainers.image.licenses=${{ needs.pre-build.outputs.repo_license }}" \
              --label "org.opencontainers.image.revision=${{ github.sha }}" \
              --label "org.opencontainers.image.sbom.format=${{ needs.pre-build.outputs.sbom_format }}" \
              --annotation "org.opencontainers.image.description=A Docker image automatically built from the repo ${{ github.server_url }}/${{ github.repository }}" \
              --annotation "org.opencontainers.image.documentation=${{ github.server_url }}/${{ github.repository }}/docs" \
              --annotation "org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}" \
              --annotation "org.opencontainers.image.url=https://github.com/${{ github.actor }}/${{ github.event.repository.name }}/packages" \
              --annotation "org.opencontainers.image.provenance=github-actions" \
              --provenance=inline \
              --sbom=true \
              --sbom-format=${{ needs.pre-build.outputs.sbom_format }} \
              --push \
              .
              
            echo "Completed building for platform: $platform, tag: $tag"
          done

  build-and-push-dockerhub:
    name: Build & Push to Docker Hub - Chunk ${{ matrix.chunk.id }}
    if: ${{ inputs.registry == 'dockerhub' }}
    needs: pre-build
    permissions:
      contents: read
    runs-on: ubuntu-latest
    env:
      sbom_format: ${{ needs.pre-build.outputs.sbom_format }}
    strategy:
      max-parallel: 10
      fail-fast: false
      matrix:
        chunk: ${{ fromJson(needs.pre-build.outputs.platform_tag_chunks) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PAT }}

      # Process each platform-tag combination in this chunk
      - name: Process Combinations
        run: |
          combinations='${{ toJson(matrix.chunk.combinations) }}'
          echo "Processing $(echo "$combinations" | jq length) combinations in chunk ${{ matrix.chunk.id }}"
          
          for combination in $(echo "$combinations" | jq -c '.[]'); do
            platform=$(echo "$combination" | jq -r '.platform')
            tag=$(echo "$combination" | jq -r '.tag')
            
            echo "Building for platform: $platform, tag: $tag"
            
            # Build and push
            docker buildx build \
              --platform $platform \
              --tag ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:$tag \
              --cache-from type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:cache-${{ github.ref_name }},oci-mediatypes=true,compression=zstd,ignore-error=true \
              --cache-to type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:cache-${{ github.ref_name }},mode=max,compression=zstd,compression-level=5 \
              --label "org.opencontainers.image.title=${{ github.event.repository.name }}" \
              --label "org.opencontainers.image.version=$tag" \
              --label "org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}" \
              --label "org.opencontainers.image.authors=${{ needs.pre-build.outputs.repo_contributors }}" \
              --label "org.opencontainers.image.licenses=${{ needs.pre-build.outputs.repo_license }}" \
              --label "org.opencontainers.image.revision=${{ github.sha }}" \
              --label "org.opencontainers.image.sbom.format=${{ needs.pre-build.outputs.sbom_format }}" \
              --annotation "org.opencontainers.image.description=A Docker image automatically built from the repo ${{ github.server_url }}/${{ github.repository }}" \
              --annotation "org.opencontainers.image.documentation=${{ github.server_url }}/${{ github.repository }}/docs" \
              --annotation "org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}" \
              --annotation "org.opencontainers.image.url=https://hub.docker.com/r/${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}" \
              --annotation "org.opencontainers.image.provenance=github-actions" \
              --provenance=inline \
              --sbom=true \
              --sbom-format=${{ needs.pre-build.outputs.sbom_format }} \
              --push \
              .
              
            echo "Completed building for platform: $platform, tag: $tag"
          done
