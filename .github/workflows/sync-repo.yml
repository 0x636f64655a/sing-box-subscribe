name: Sync Repo

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  retrieve-info:
    name: Retrieve Repo Info
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      REPO_FULL_NAME: ${{ github.repository }}
    outputs:
      upstream_full_name: ${{ steps.upstream-info.outputs.UPSTREAM_FULL_NAME }}
      upstream_default_branch: ${{ steps.upstream-info.outputs.UPSTREAM_DEFAULT_BRANCH }}
      upstream_branches: ${{ steps.get-branches.outputs.UPSTREAM_BRANCHES }}
      is_fork: ${{ steps.check-fork.outputs.IS_FORK }}
    steps:
      - name: Check if Repository is a Fork
        id: check-fork
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Checking if repository is a fork..."
          response=$(curl -s -H "Authorization: token $GH_TOKEN" "https://api.github.com/repos/$REPO_FULL_NAME")
          
          if [ -z "$response" ]; then
            echo "Failed to retrieve repository information."
            echo "IS_FORK=false" >> "$GITHUB_OUTPUT"
            exit 1
          fi
          
          if echo "$response" | jq -e '.fork == true' >/dev/null; then
            echo "This repository is a fork."
            echo "IS_FORK=true" >> "$GITHUB_OUTPUT"
          else
            echo "This repository is not a fork."
            echo "IS_FORK=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Retrieve Upstream Repo Info
        id: upstream-info
        if: steps.check-fork.outputs.IS_FORK == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          response=$(curl -s -H "Authorization: token $GH_TOKEN" "https://api.github.com/repos/$REPO_FULL_NAME")
          echo "Fetching repository information via Github API..."

          if [ -z "$response" ]; then
            echo "Failed to retrieve repository information."
            exit 1
          fi

          if ! echo "$response" | jq -e '.parent' >/dev/null; then
            echo "This repository is a fork but parent information is missing."
            exit 1
          fi

          name=$(echo "$response" | jq -r '.parent.name')
          echo "UPSTREAM_REPO=$name" >> "$GITHUB_ENV"

          html_url=$(echo "$response" | jq -r '.parent.html_url')
          echo "UPSTREAM_REPO_URL=$html_url" >> "$GITHUB_ENV"

          full_name=$(echo "$response" | jq -r '.parent.full_name')
          echo "UPSTREAM_FULL_NAME=$full_name" >> "$GITHUB_OUTPUT"

          default_branch=$(echo "$response" | jq -r '.parent.default_branch')
          echo "UPSTREAM_DEFAULT_BRANCH=$default_branch" >> "$GITHUB_OUTPUT"

      - name: Retrieve Upstream Branches
        id: get-branches
        if: steps.check-fork.outputs.IS_FORK == 'true'
        env:
          UPSTREAM_REPO_URL: ${{ env.UPSTREAM_REPO_URL }}
        run: |
          if [ -z "$UPSTREAM_REPO_URL" ]; then
            echo "Upstream repository URL is empty. Exiting..."
            echo "UPSTREAM_BRANCHES=[]" >> "$GITHUB_OUTPUT"
            exit 1
          fi
          
          branches=$(git ls-remote --heads "$UPSTREAM_REPO_URL" | awk '{print $2}' | sed -E 's|refs/heads/||g' | tr -d '[:cntrl:]')
          echo "Fetching branches from upstream repository..."

          if [[ -z "$branches" ]]; then
            echo "No branches found! Setting empty array to avoid workflow failure."
            echo "UPSTREAM_BRANCHES=[]" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Ensure valid JSON array format
          branches_json=$(echo "$branches" | jq -Rcs 'split("\n") | map(select(length > 0))')
          echo "Upstream branches JSON array: $branches_json"
          echo "UPSTREAM_BRANCHES=$branches_json" >> "$GITHUB_OUTPUT"

  collect-tags:
    name: Collect Repository Tags
    runs-on: ubuntu-latest
    needs: retrieve-info
    permissions:
      contents: read
    outputs:
      repo_tags: ${{ steps.fetch-tags.outputs.REPO_TAGS }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch Tags From Upstream
        id: fetch-tags
        env:
          UPSTREAM_URL: https://github.com/${{ needs.retrieve-info.outputs.upstream_full_name }}.git
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

          if ! git remote get-url upstream &> /dev/null; then
            git remote add upstream "$UPSTREAM_URL"
          fi

          git fetch --tags upstream || { echo "Failed to fetch tags"; exit 1; }
          tags=$(git tag -l)
          
          if [ -z "$tags" ]; then
            echo "No tags found in upstream repository."
            echo "ALL_TAGS=[]" >> "$GITHUB_OUTPUT"
          else
            tags_json=$(git tag --sort=creatordate | jq -R . | jq -cs .)
            echo "REPO_TAGS=$tags_json" >> "$GITHUB_OUTPUT"
          fi

  sync-fork:
    name: Sync Forked Repo
    runs-on: ubuntu-latest
    needs: [retrieve-info, collect-tags]
    permissions:
      contents: write
    strategy:
      matrix:
        branches: ${{ fromJson(needs.retrieve-info.outputs.UPSTREAM_BRANCHES) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Sync Branch and Push
        env:
          UPSTREAM_URL: https://github.com/${{ needs.retrieve-info.outputs.upstream_full_name }}.git
          UPSTREAM_BRANCHES: ${{ matrix.branches }}
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

          if ! git remote get-url upstream &> /dev/null; then
            git remote add upstream "$UPSTREAM_URL"
          fi

          git sparse-checkout set --no-cone --stdin <<EOF
          /*
          !.github/workflows/
          EOF

          if git show-ref --verify --quiet "refs/heads/$UPSTREAM_BRANCHES"; then
            git checkout "$UPSTREAM_BRANCHES"
          else
            git checkout -b "$UPSTREAM_BRANCHES" "upstream/$UPSTREAM_BRANCHES"
          fi

          git pull --rebase upstream "$UPSTREAM_BRANCHES"
          git push origin "$UPSTREAM_BRANCHES"
          
      - name: Push Tags
        if: ${{ matrix.branches == needs.retrieve-info.outputs.upstream_default_branch }}
        run: |
          # Only push tags once on the default branch iteration
          tag_count=$(git tag -l | wc -l)
          if [ "$tag_count" -gt 0 ]; then
            git push origin --tags
          else
            echo "No tags to push."
          fi

  build-and-push-images:
    name: Build & Push Images to Registries
    needs:
      - retrieve-info
      - collect-tags
      - sync-fork
    strategy:
      matrix:
        registry: [ghcr, dockerhub]
    uses: ./.github/workflows/build-and-push-docker-images-chunked.yml
    with:
      repo_tags: ${{ needs.collect-tags.outputs.repo_tags }}
      registry: ${{ matrix.registry }}
      upstream_full_name: ${{ needs.retrieve-info.outputs.upstream_full_name }}
